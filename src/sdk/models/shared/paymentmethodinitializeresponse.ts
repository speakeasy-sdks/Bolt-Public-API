/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose, Type } from "class-transformer";

export enum PaymentMethodInitializeResponseActionMethod {
    Get = "GET",
    Post = "POST",
}

export enum PaymentMethodInitializeResponseActionType {
    Redirect = "redirect",
    Finalize = "finalize",
}

export class PaymentMethodInitializeResponseAction extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "method" })
    method?: PaymentMethodInitializeResponseActionMethod;

    @SpeakeasyMetadata()
    @Expose({ name: "type" })
    type?: PaymentMethodInitializeResponseActionType;

    @SpeakeasyMetadata()
    @Expose({ name: "url" })
    url?: string;
}

export enum PaymentMethodInitializeResponseStatus {
    AwaitingUserConfirmation = "awaiting_user_confirmation",
    PaymentReady = "payment_ready",
    UpdatePaymentMethod = "update_payment_method",
    Success = "success",
}

export class PaymentMethodInitializeResponse extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "action" })
    @Type(() => PaymentMethodInitializeResponseAction)
    action?: PaymentMethodInitializeResponseAction;

    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "status" })
    status?: PaymentMethodInitializeResponseStatus;
}
